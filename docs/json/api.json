{
	"id": 0,
	"name": "pc-ex",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 296,
			"name": "CameraComponent_EX",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"decorators": [
				{
					"name": "extendClass",
					"type": {
						"type": "reference",
						"name": "extendClass"
					},
					"arguments": {
						"extendClassName": "\"CameraComponent\""
					}
				}
			],
			"children": [
				{
					"id": 297,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 298,
							"name": "new CameraComponent_EX",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 299,
									"name": "system",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CameraComponentSystem"
									}
								},
								{
									"id": 300,
									"name": "entity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Entity"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 296,
								"name": "CameraComponent_EX"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.constructor"
					}
				},
				{
					"id": 342,
					"name": "aspectRatio",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The aspect ratio (width divided by height) of the\ncamera. If aspectRatioMode is {@link ASPECT_AUTO}, then this value will be automatically\ncalculated every frame, and you can only read it. If it's ASPECT_MANUAL, you can set\nthe value."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2387,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.aspectRatio"
					}
				},
				{
					"id": 343,
					"name": "aspectRatioMode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The aspect ratio mode of the camera. Can be:\n- {@link ASPECT_AUTO}: aspect ratio will be calculated from the current render\ntarget's width divided by height.\n- {@link ASPECT_MANUAL}: use the aspectRatio value.\nDefaults to {@link ASPECT_AUTO}."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2395,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.aspectRatioMode"
					}
				},
				{
					"id": 360,
					"name": "calculateProjection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Custom function you can\nprovide to calculate the camera projection matrix manually. Can be used for complex\neffects like doing oblique projection. Function is called using component's scope.\nArguments:\n- {{@link Mat4}} transformMatrix: output of the function\n- {number} view: Type of view. Can be {@link VIEW_CENTER}, {@link VIEW_LEFT} or {@link VIEW_RIGHT}.\nLeft and right are only used in stereo rendering."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2493,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "CalculateMatrix"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.calculateProjection"
					}
				},
				{
					"id": 359,
					"name": "calculateTransform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Custom function you can\nprovide to calculate the camera transformation matrix manually. Can be used for complex\neffects like reflections. Function is called using component's scope.\nArguments:\n- {@link Mat4} transformMatrix: output of the function.\n- {number} view: Type of view. Can be {@link VIEW_CENTER}, {@link VIEW_LEFT} or {@link VIEW_RIGHT}.\nLeft and right are only used in stereo rendering."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2483,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "CalculateMatrix"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.calculateTransform"
					}
				},
				{
					"id": 344,
					"name": "clearColor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The color used to clear the canvas to before the\ncamera starts to render. Defaults to [0.75, 0.75, 0.75, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2400,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.clearColor"
					}
				},
				{
					"id": 345,
					"name": "clearColorBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "If true the camera will clear the color buffer\nto the color set in clearColor. Defaults to true."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2405,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.clearColorBuffer"
					}
				},
				{
					"id": 346,
					"name": "clearDepthBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "If true the camera will clear the depth buffer.\nDefaults to true."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2410,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.clearDepthBuffer"
					}
				},
				{
					"id": 347,
					"name": "clearStencilBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "If true the camera will clear the stencil\nbuffer. Defaults to true."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2415,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.clearStencilBuffer"
					}
				},
				{
					"id": 361,
					"name": "cullFaces",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "If true the camera will take material.cull into account.\nOtherwise both front and back faces will be rendered. Defaults to true."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2498,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.cullFaces"
					}
				},
				{
					"id": 364,
					"name": "disablePostEffectsLayer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Layer ID of a layer on which the postprocessing of the camera stops being applied to.\nDefaults to LAYERID_UI, which causes post processing to not be applied to UI layer and\nany following layers for the camera. Set to undefined for post-processing to be applied to all layers of the camera."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2516,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.disablePostEffectsLayer"
					}
				},
				{
					"id": 367,
					"name": "enabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Enables or disables the component."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2680,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.enabled"
					}
				},
				{
					"id": 366,
					"name": "entity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The Entity that this Component is attached to."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2676,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Entity"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.entity"
					}
				},
				{
					"id": 348,
					"name": "farClip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The distance from the camera after which no rendering\nwill take place. Defaults to 1000."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2420,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.farClip"
					}
				},
				{
					"id": 362,
					"name": "flipFaces",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "If true the camera will invert front and back faces.\nCan be useful for reflection rendering. Defaults to false."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2503,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.flipFaces"
					}
				},
				{
					"id": 349,
					"name": "fov",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The field of view of the camera in degrees. Usually this is\nthe Y-axis field of view, see {@link CameraComponent#horizontalFov}. Used for\n{@link PROJECTION_PERSPECTIVE} cameras only. Defaults to 45."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2426,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.fov"
					}
				},
				{
					"id": 308,
					"name": "frustum",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "Queries the camera's frustum shape."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2258,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Frustum"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.frustum"
					}
				},
				{
					"id": 358,
					"name": "frustumCulling",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Controls the culling of mesh instances against\nthe camera frustum, i.e. if objects outside of camera should be omitted from rendering.\nIf false, all mesh instances in the scene are rendered by the camera, regardless of\nvisibility. Defaults to false."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2473,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.frustumCulling"
					}
				},
				{
					"id": 350,
					"name": "horizontalFov",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Set which axis to use for the Field of View\ncalculation. Defaults to false."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2431,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.horizontalFov"
					}
				},
				{
					"id": 363,
					"name": "layers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "An array of layer IDs ({@link Layer#id}) to which this\ncamera should belong. Don't push/pop/splice or modify this array, if you want to\nchange it, set a new one instead. Defaults to [LAYERID_WORLD, LAYERID_DEPTH,\nLAYERID_SKYBOX, LAYERID_UI, LAYERID_IMMEDIATE]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2510,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.layers"
					}
				},
				{
					"id": 351,
					"name": "nearClip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The distance from the camera before which no rendering\nwill take place. Defaults to 0.1."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2436,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.nearClip"
					}
				},
				{
					"id": 352,
					"name": "orthoHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The half-height of the orthographic view window (in\nthe Y-axis). Used for {@link PROJECTION_ORTHOGRAPHIC} cameras only. Defaults to 10."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2441,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.orthoHeight"
					}
				},
				{
					"id": 357,
					"name": "postEffects",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The post effects queue for this camera.\nUse this to add or remove post effects from the camera."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2466,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "PostEffectQueue"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.postEffects"
					}
				},
				{
					"id": 353,
					"name": "priority",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Controls the order in which cameras are rendered. Cameras\nwith smaller values for priority are rendered first. Defaults to 0."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2446,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.priority"
					}
				},
				{
					"id": 341,
					"name": "projection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The type of projection used to render the camera.\nCan be:\n- {@link PROJECTION_PERSPECTIVE}: A perspective projection. The camera frustum\nresembles a truncated pyramid.\n- {@link PROJECTION_ORTHOGRAPHIC}: An orthographic projection. The camera\nfrustum is a cuboid.\nDefaults to {@link PROJECTION_PERSPECTIVE}."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2380,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.projection"
					}
				},
				{
					"id": 309,
					"name": "projectionMatrix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "Queries the camera's projection matrix."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2262,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Mat4"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.projectionMatrix"
					}
				},
				{
					"id": 355,
					"name": "rect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Controls where on the screen the camera will be rendered in\nnormalized screen coordinates. Defaults to [0, 0, 1, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2456,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec4"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.rect"
					}
				},
				{
					"id": 354,
					"name": "renderTarget",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Render target to which rendering of the cameras\nis performed. If not set, it will render simply to the screen."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2451,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "RenderTarget"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.renderTarget"
					}
				},
				{
					"id": 356,
					"name": "scissorRect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Clips all pixels which are not in the rectangle.\nThe order of the values is [x, y, width, height]. Defaults to [0, 0, 1, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2461,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec4"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.scissorRect"
					}
				},
				{
					"id": 365,
					"name": "system",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The ComponentSystem used to create this Component."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2672,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ComponentSystem"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.system"
					}
				},
				{
					"id": 310,
					"name": "viewMatrix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "Queries the camera's view matrix."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2266,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Mat4"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.viewMatrix"
					}
				},
				{
					"id": 321,
					"name": "calculateAspectRatio",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2299,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 322,
							"name": "calculateAspectRatio",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Calculates aspect ratio value for a given render target.",
								"returns": "The aspect ratio of the render target (or backbuffer).\n"
							},
							"parameters": [
								{
									"id": 323,
									"name": "rt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "RenderTarget"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.calculateAspectRatio"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.calculateAspectRatio"
					}
				},
				{
					"id": 338,
					"name": "endXr",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2370,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 339,
							"name": "endXr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Attempt to end XR session of this camera.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// On an entity with a camera component\nthis.entity.camera.endXr(function (err) {\n// not anymore in XR\n});"
									}
								]
							},
							"parameters": [
								{
									"id": 340,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "XrError"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.endXr"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.endXr"
					}
				},
				{
					"id": 378,
					"name": "fire",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 851,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 379,
							"name": "fire",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Fire an event, all additional arguments are passed on to the event listener.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nobj.fire('test', 'This is the message');"
									}
								]
							},
							"parameters": [
								{
									"id": 380,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Name of event to fire."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 381,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 382,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 383,
									"name": "arg3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 384,
									"name": "arg4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 385,
									"name": "arg5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 386,
									"name": "arg6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 387,
									"name": "arg7",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 388,
									"name": "arg8",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.fire"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.fire"
					}
				},
				{
					"id": 394,
					"name": "hasEvent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 875,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 395,
							"name": "hasEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Test if there are any handlers bound to an event name.",
								"returns": "True if the object has handlers bound to the specified event name.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nobj.on('test', function () { }); // bind an event to 'test'\nobj.hasEvent('test'); // returns true\nobj.hasEvent('hello'); // returns false"
									}
								]
							},
							"parameters": [
								{
									"id": 396,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the event to test."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.hasEvent"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.hasEvent"
					}
				},
				{
					"id": 373,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 835,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 374,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Detach an event handler from an event. If callback is not provided then all callbacks are unbound from the event,\nif scope is not provided then all events with the callback will be unbound.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar handler = function () {\n};\nobj.on('test', handler);\n\nobj.off(); // Removes all events\nobj.off('test'); // Removes all events called 'test'\nobj.off('test', handler); // Removes all handler functions, called 'test'\nobj.off('test', handler, this); // Removes all hander functions, called 'test' with scope this"
									}
								]
							},
							"parameters": [
								{
									"id": 375,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 376,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 377,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.off"
					}
				},
				{
					"id": 368,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 817,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 369,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Attach an event handler to an event.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nobj.on('test', function (a, b) {\n    console.log(a + b);\n});\nobj.fire('test', 1, 2); // prints 3 to the console"
									}
								]
							},
							"parameters": [
								{
									"id": 370,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Name of the event to bind the callback to."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 371,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Function that is called when event is fired. Note the callback is limited to 8 arguments."
									},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 372,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.on"
					}
				},
				{
					"id": 389,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 865,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 390,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Attach an event handler to an event. This handler will be removed after being fired once.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nobj.once('test', function (a, b) {\n    console.log(a + b);\n});\nobj.fire('test', 1, 2); // prints 3 to the console\nobj.fire('test', 1, 2); // not going to get handled"
									}
								]
							},
							"parameters": [
								{
									"id": 391,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Name of the event to bind the callback to."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 392,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Function that is called when event is fired. Note the callback is limited to 8 arguments."
									},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 393,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.once"
					}
				},
				{
					"id": 304,
					"name": "raycastMeshInstances",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/cameraComponent.ts",
							"line": 56,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 305,
							"name": "raycastMeshInstances",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "从此相机发射射线，检测一系列mesh的交点",
								"returns": "交点集合\n"
							},
							"parameters": [
								{
									"id": 306,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "要检测的射线"
									},
									"type": {
										"type": "reference",
										"name": "Ray"
									}
								},
								{
									"id": 307,
									"name": "meshInstances",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "要检测的meshInstance集合"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "MeshInstance"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "intersect"
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.CameraComponent.raycastMeshInstances"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.CameraComponent.raycastMeshInstances"
					}
				},
				{
					"id": 311,
					"name": "screenToWorld",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2285,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 312,
							"name": "screenToWorld",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Convert a point from 2D screen space to 3D world space.",
								"returns": "The world space coordinate.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Get the start and end points of a 3D ray fired from a screen click position\nvar start = entity.camera.screenToWorld(clickX, clickY, entity.camera.nearClip);\nvar end = entity.camera.screenToWorld(clickX, clickY, entity.camera.farClip);\n\n// Use the ray coordinates to perform a raycast\napp.systems.rigidbody.raycastFirst(start, end, function (result) {\nconsole.log(\"Entity \" + result.entity.name + \" was selected\");\n});"
									}
								]
							},
							"parameters": [
								{
									"id": 313,
									"name": "screenx",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "X coordinate on PlayCanvas' canvas element."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 314,
									"name": "screeny",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Y coordinate on PlayCanvas' canvas element."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 315,
									"name": "cameraz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The distance from the camera in world space to create\nthe new point."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 316,
									"name": "worldCoord",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Vec3"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vec3"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.screenToWorld"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.screenToWorld"
					}
				},
				{
					"id": 324,
					"name": "startXr",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2349,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 325,
							"name": "startXr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Attempt to start XR session with this camera.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// On an entity with a camera component\nthis.entity.camera.startXr(pc.XRTYPE_VR, pc.XRSPACE_LOCAL, {\ncallback: function (err) {\nif (err) {\n// failed to start XR session\n} else {\n// in XR\n}\n}\n});"
									}
								]
							},
							"parameters": [
								{
									"id": 326,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The type of session. Can be one of the following:\n\n- {@link XRTYPE_INLINE}: Inline - always available type of session. It has\nlimited feature availability and is rendered into HTML element.\n- {@link XRTYPE_VR}: Immersive VR - session that provides exclusive access\nto the VR device with the best available tracking features.\n- {@link XRTYPE_AR}: Immersive AR - session that provides exclusive access\nto the VR/AR device that is intended to be blended with the real-world environment."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 327,
									"name": "spaceType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Reference space type. Can be one of the following:\n\n- {@link XRSPACE_VIEWER}: Viewer - always supported space with some basic\ntracking capabilities.\n- {@link XRSPACE_LOCAL}: Local - represents a tracking space with a native\norigin near the viewer at the time of creation. It is meant for seated or basic\nlocal XR sessions.\n- {@link XRSPACE_LOCALFLOOR}: Local Floor - represents a tracking space with\na native origin at the floor in a safe position for the user to stand. The y-axis\nequals 0 at floor level. Floor level value might be estimated by the underlying\nplatform. It is meant for seated or basic local XR sessions.\n- {@link XRSPACE_BOUNDEDFLOOR}: Bounded Floor - represents a tracking space\nwith its native origin at the floor, where the user is expected to move within a\npre-established boundary.\n- {@link XRSPACE_UNBOUNDED}: Unbounded - represents a tracking space where the\nuser is expected to move freely around their environment, potentially long\ndistances from their starting point."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 328,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 329,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"children": [
												{
													"id": 333,
													"name": "callback",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
															"line": 2353,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "XrError"
													}
												},
												{
													"id": 334,
													"name": "depthSensing",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
															"line": 2354,
															"character": 8
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 335,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExternal": true
															},
															"children": [
																{
																	"id": 337,
																	"name": "dataFormatPreference",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
																			"line": 2356,
																			"character": 12
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 336,
																	"name": "usagePreference",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
																			"line": 2355,
																			"character": 12
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		337,
																		336
																	]
																}
															]
														}
													}
												},
												{
													"id": 331,
													"name": "imageTracking",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
															"line": 2351,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 330,
													"name": "optionalFeatures",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
															"line": 2350,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 332,
													"name": "planeDetection",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
															"line": 2352,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														333,
														334,
														331,
														330,
														332
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.startXr"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.startXr"
					}
				},
				{
					"id": 301,
					"name": "syncCamera",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/cameraComponent.ts",
							"line": 34,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 302,
							"name": "syncCamera",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "让两个相机同步"
							},
							"parameters": [
								{
									"id": 303,
									"name": "camera",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "要同步的相机\n"
									},
									"type": {
										"type": "reference",
										"name": "CameraComponent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.CameraComponent.syncCamera"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.CameraComponent.syncCamera"
					}
				},
				{
					"id": 317,
					"name": "worldToScreen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 2292,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 318,
							"name": "worldToScreen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Convert a point from 3D world space to 2D screen space.",
								"returns": "The screen space coordinate.\n"
							},
							"parameters": [
								{
									"id": 319,
									"name": "worldCoord",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The world space coordinate."
									},
									"type": {
										"type": "reference",
										"name": "Vec3"
									}
								},
								{
									"id": 320,
									"name": "screenCoord",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Vec3"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vec3"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.CameraComponent.worldToScreen"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.CameraComponent.worldToScreen"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						297
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						342,
						343,
						360,
						359,
						344,
						345,
						346,
						347,
						361,
						364,
						367,
						366,
						348,
						362,
						349,
						308,
						358,
						350,
						363,
						351,
						352,
						357,
						353,
						341,
						309,
						355,
						354,
						356,
						365,
						310
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						321,
						338,
						378,
						394,
						373,
						368,
						389,
						304,
						311,
						324,
						301,
						317
					]
				}
			],
			"sources": [
				{
					"fileName": "src/extensions/extendClasses/cameraComponent.ts",
					"line": 28,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "CameraComponent"
				}
			]
		},
		{
			"id": 397,
			"name": "Color_EX",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"decorators": [
				{
					"name": "extendClass",
					"type": {
						"type": "reference",
						"name": "extendClass"
					},
					"arguments": {
						"extendClassName": "\"Color\""
					}
				}
			],
			"children": [
				{
					"id": 407,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 408,
							"name": "new Color_EX",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 409,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 410,
									"name": "g",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 411,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 412,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 397,
								"name": "Color_EX"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Color.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.constructor"
					}
				},
				{
					"id": 413,
					"name": "_shaderData",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/color.ts",
							"line": 18,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Float32Array"
					}
				},
				{
					"id": 444,
					"name": "a",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The alpha component of the color."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9564,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.a"
					}
				},
				{
					"id": 443,
					"name": "b",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The blue component of the color."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9560,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.b"
					}
				},
				{
					"id": 442,
					"name": "g",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The green component of the color."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9556,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.g"
					}
				},
				{
					"id": 441,
					"name": "r",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The red component of the color."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9552,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.r"
					}
				},
				{
					"id": 398,
					"name": "BLACK",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to black [0, 0, 0, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9516,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.BLACK"
					}
				},
				{
					"id": 399,
					"name": "BLUE",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to blue [0, 0, 1, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9520,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.BLUE"
					}
				},
				{
					"id": 400,
					"name": "CYAN",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to cyan [0, 1, 1, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9524,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.CYAN"
					}
				},
				{
					"id": 401,
					"name": "GRAY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to gray [0.5, 0.5, 0.5, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9528,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.GRAY"
					}
				},
				{
					"id": 402,
					"name": "GREEN",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to green [0, 1, 0, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9532,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.GREEN"
					}
				},
				{
					"id": 403,
					"name": "MAGENTA",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to magenta [1, 0, 1, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9536,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.MAGENTA"
					}
				},
				{
					"id": 404,
					"name": "RED",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to red [1, 0, 0, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9540,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.RED"
					}
				},
				{
					"id": 405,
					"name": "WHITE",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to white [1, 1, 1, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9544,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.WHITE"
					}
				},
				{
					"id": 406,
					"name": "YELLOW",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A constant color set to yellow [1, 1, 0, 1]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9548,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.YELLOW"
					}
				},
				{
					"id": 414,
					"name": "shaderData",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/color.ts",
							"line": 20,
							"character": 8
						}
					],
					"getSignature": [
						{
							"id": 415,
							"name": "shaderData",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Float32Array"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Color.shaderData"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Color.shaderData"
					}
				},
				{
					"id": 416,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9443,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 417,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a clone of the specified color.",
								"returns": "A duplicate color object.\n"
							},
							"type": {
								"type": "reference",
								"name": "Color"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Color.clone"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.clone"
					}
				},
				{
					"id": 418,
					"name": "copy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9456,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 419,
							"name": "copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Copies the contents of a source color to a destination color.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar src = new pc.Color(1, 0, 0, 1);\nvar dst = new pc.Color();\n\ndst.copy(src);\n\nconsole.log(\"The two colors are \" + (dst.equals(src) ? \"equal\" : \"different\"));"
									}
								]
							},
							"parameters": [
								{
									"id": 420,
									"name": "rhs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A color to copy to the specified color."
									},
									"type": {
										"type": "reference",
										"name": "Color"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Color"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Color.copy"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.copy"
					}
				},
				{
					"id": 421,
					"name": "equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9466,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 422,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Reports whether two colors are equal.",
								"returns": "True if the colors are equal and false otherwise.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar a = new pc.Color(1, 0, 0, 1);\nvar b = new pc.Color(1, 1, 0, 1);\nconsole.log(\"The two colors are \" + (a.equals(b) ? \"equal\" : \"different\"));"
									}
								]
							},
							"parameters": [
								{
									"id": 423,
									"name": "rhs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The color to compare to the specified color."
									},
									"type": {
										"type": "reference",
										"name": "Color"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Color.equals"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.equals"
					}
				},
				{
					"id": 435,
					"name": "fromString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9500,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 436,
							"name": "fromString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Set the values of the color from a string representation '#11223344' or '#112233'.",
								"returns": "Self for chaining.\n"
							},
							"parameters": [
								{
									"id": 437,
									"name": "hex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A string representation in the format '#RRGGBBAA' or '#RRGGBB'. Where RR, GG, BB, AA are red, green, blue and alpha values.\nThis is the same format used in HTML/CSS."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Color"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Color.fromString"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.fromString"
					}
				},
				{
					"id": 430,
					"name": "lerp",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9493,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 431,
							"name": "lerp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the result of a linear interpolation between two specified colors.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar a = new pc.Color(0, 0, 0);\nvar b = new pc.Color(1, 1, 0.5);\nvar r = new pc.Color();\n\nr.lerp(a, b, 0);   // r is equal to a\nr.lerp(a, b, 0.5); // r is 0.5, 0.5, 0.25\nr.lerp(a, b, 1);   // r is equal to b"
									}
								]
							},
							"parameters": [
								{
									"id": 432,
									"name": "lhs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The color to interpolate from."
									},
									"type": {
										"type": "reference",
										"name": "Color"
									}
								},
								{
									"id": 433,
									"name": "rhs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The color to interpolate to."
									},
									"type": {
										"type": "reference",
										"name": "Color"
									}
								},
								{
									"id": 434,
									"name": "alpha",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The value controlling the point of interpolation. Between 0 and 1, the linear interpolant\nwill occur on a straight line between lhs and rhs. Outside of this range, the linear interpolant will occur on\na ray extrapolated from this line."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Color"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Color.lerp"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.lerp"
					}
				},
				{
					"id": 424,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9475,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 425,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Assign values to the color components, including alpha.",
								"returns": "Self for chaining.\n"
							},
							"parameters": [
								{
									"id": 426,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The value for red (0-1)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 427,
									"name": "g",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The value for blue (0-1)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 428,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The value for green (0-1)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 429,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Color"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Color.set"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.set"
					}
				},
				{
					"id": 438,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9512,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 439,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Converts the color to string form. The format is '#RRGGBBAA', where\nRR, GG, BB, AA are the red, green, blue and alpha values. When the alpha value is not\nincluded (the default), this is the same format as used in HTML/CSS.",
								"returns": "The color in string form.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar c = new pc.Color(1, 1, 1);\n// Outputs #ffffffff\nconsole.log(c.toString());"
									}
								]
							},
							"parameters": [
								{
									"id": 440,
									"name": "alpha",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "If true, the output string will include the alpha value."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Color.toString"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Color.toString"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						407
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						413,
						444,
						443,
						442,
						441,
						398,
						399,
						400,
						401,
						402,
						403,
						404,
						405,
						406
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						414
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						416,
						418,
						421,
						435,
						430,
						424,
						438
					]
				}
			],
			"sources": [
				{
					"fileName": "src/extensions/extendClasses/color.ts",
					"line": 16,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Color"
				}
			]
		},
		{
			"id": 445,
			"name": "Curve_EX",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"decorators": [
				{
					"name": "extendClass",
					"type": {
						"type": "reference",
						"name": "extendClass"
					},
					"arguments": {
						"extendClassName": "\"Curve\""
					}
				}
			],
			"children": [
				{
					"id": 446,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 447,
							"name": "new Curve_EX",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 448,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 445,
								"name": "Curve_EX"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Curve.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.constructor"
					}
				},
				{
					"id": 469,
					"name": "length",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The number of keys in the curve. [read only]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9714,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.length"
					}
				},
				{
					"id": 471,
					"name": "tension",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Controls how {@link CURVE_SPLINE} tangents are calculated.\nValid range is between 0 and 1 where 0 results in a non-smooth curve (equivalent to linear\ninterpolation) and 1 results in a very smooth curve. Use 0.5 for a Catmull-rom spline."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9731,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.tension"
					}
				},
				{
					"id": 470,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The curve interpolation scheme. Can be:",
						"text": "- {@link CURVE_LINEAR}\n- {@link CURVE_SMOOTHSTEP}\n- {@link CURVE_SPLINE}\n- {@link CURVE_STEP}\n\nDefaults to {@link CURVE_SMOOTHSTEP}.\n"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9725,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.type"
					}
				},
				{
					"id": 455,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9689,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 456,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Add a new key to the curve.",
								"returns": "pair.\n"
							},
							"parameters": [
								{
									"id": 457,
									"name": "time",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Time to add new key."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 458,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Value of new key."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Curve.add"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.add"
					}
				},
				{
					"id": 467,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9710,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 468,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a clone of the specified curve object.",
								"returns": "A clone of the specified curve.\n"
							},
							"type": {
								"type": "reference",
								"name": "Curve"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Curve.clone"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.clone"
					}
				},
				{
					"id": 459,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9695,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 460,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Return a specific key.",
								"returns": "The key at the specified index.\n"
							},
							"parameters": [
								{
									"id": 461,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The index of the key to return."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Curve.get"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.get"
					}
				},
				{
					"id": 452,
					"name": "getNormal",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/curve.ts",
							"line": 31,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 453,
							"name": "getNormal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 454,
									"name": "percent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Curve.getNormal"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Curve.getNormal"
					}
				},
				{
					"id": 449,
					"name": "getTangent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/curve.ts",
							"line": 22,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 450,
							"name": "getTangent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 451,
									"name": "percent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Curve.getTangent"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Curve.getTangent"
					}
				},
				{
					"id": 462,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9699,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 463,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sort keys by time."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Curve.sort"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.sort"
					}
				},
				{
					"id": 464,
					"name": "value",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 9705,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 465,
							"name": "value",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the interpolated value of the curve at specified time.",
								"returns": "The interpolated value.\n"
							},
							"parameters": [
								{
									"id": 466,
									"name": "time",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The time at which to calculate the value."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Curve.value"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Curve.value"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						446
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						469,
						471,
						470
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						455,
						467,
						459,
						452,
						449,
						462,
						464
					]
				}
			],
			"sources": [
				{
					"fileName": "src/extensions/extendClasses/curve.ts",
					"line": 19,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Curve"
				}
			]
		},
		{
			"id": 763,
			"name": "DebugLine",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"decorators": [
				{
					"name": "newUtil",
					"type": {
						"type": "reference",
						"name": "newUtil"
					}
				}
			],
			"children": [
				{
					"id": 771,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 772,
							"name": "new DebugLine",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 763,
								"name": "DebugLine"
							}
						}
					]
				},
				{
					"id": 769,
					"name": "clearLines",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newUtils/debugLine.ts",
							"line": 30,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 770,
							"name": "clearLines",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 764,
					"name": "drawLine",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newUtils/debugLine.ts",
							"line": 19,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 765,
							"name": "drawLine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 766,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vec3"
									}
								},
								{
									"id": 767,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vec3"
									}
								},
								{
									"id": 768,
									"name": "color",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Color"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						771
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						769,
						764
					]
				}
			],
			"sources": [
				{
					"fileName": "src/extensions/newUtils/debugLine.ts",
					"line": 17,
					"character": 13
				}
			]
		},
		{
			"id": 472,
			"name": "Entity_EX",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"decorators": [
				{
					"name": "extendClass",
					"type": {
						"type": "reference",
						"name": "extendClass"
					},
					"arguments": {
						"extendClassName": "\"Entity\""
					}
				}
			],
			"children": [
				{
					"id": 473,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 474,
							"name": "new Entity_EX",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 475,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 476,
									"name": "app",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Application"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 472,
								"name": "Entity_EX"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.constructor"
					}
				},
				{
					"id": 481,
					"name": "_changeFlag",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 56,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 479,
					"name": "_ignoreMeshes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 52,
							"character": 12
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": "[]"
				},
				{
					"id": 478,
					"name": "_meshesToRaycast",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 50,
							"character": 12
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "MeshInstance"
						}
					},
					"defaultValue": "[]"
				},
				{
					"id": 480,
					"name": "_resultNodeDepth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 54,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 477,
					"name": "_useInput",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 48,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 523,
					"name": "anim",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link AnimComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5797,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "AnimComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.anim"
					}
				},
				{
					"id": 524,
					"name": "animation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link AnimationComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5801,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "AnimationComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.animation"
					}
				},
				{
					"id": 525,
					"name": "audiolistener",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link AudioListenerComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5805,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "AudioListenerComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.audiolistener"
					}
				},
				{
					"id": 526,
					"name": "button",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link ButtonComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5809,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ButtonComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.button"
					}
				},
				{
					"id": 527,
					"name": "camera",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link CameraComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5813,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "CameraComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.camera"
					}
				},
				{
					"id": 550,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A read-only property to get the children of this graph node."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13690,
							"character": 13
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "GraphNode"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.children"
					}
				},
				{
					"id": 528,
					"name": "collision",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link CollisionComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5817,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "CollisionComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.collision"
					}
				},
				{
					"id": 529,
					"name": "element",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link ElementComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5821,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ElementComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.element"
					}
				},
				{
					"id": 546,
					"name": "enabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Enable or disable a GraphNode. If one of the GraphNode's parents is disabled\nthere will be no other side effects. If all the parents are enabled then\nthe new value will activate / deactivate all the enabled children of the GraphNode."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13673,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.enabled"
					}
				},
				{
					"id": 545,
					"name": "forward",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "The normalized local space negative Z-axis vector of the graph node in world space."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13667,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec3"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.forward"
					}
				},
				{
					"id": 551,
					"name": "graphDepth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A read-only property to get the depth of this child within the graph. Note that for performance reasons this is only recalculated when a node is added to a new parent, i.e. It is not recalculated when a node is simply removed from the graph."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13694,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.graphDepth"
					}
				},
				{
					"id": 530,
					"name": "layoutchild",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link LayoutChildComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5825,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "LayoutChildComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.layoutchild"
					}
				},
				{
					"id": 531,
					"name": "layoutgroup",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link LayoutGroupComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5829,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "LayoutGroupComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.layoutgroup"
					}
				},
				{
					"id": 532,
					"name": "light",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link LightComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5833,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "LightComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.light"
					}
				},
				{
					"id": 533,
					"name": "model",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link ModelComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5837,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ModelComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.model"
					}
				},
				{
					"id": 676,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The non-unique name of a graph node."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14148,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.name"
					}
				},
				{
					"id": 547,
					"name": "parent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A read-only property to get a parent graph node."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13677,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "GraphNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.parent"
					}
				},
				{
					"id": 534,
					"name": "particlesystem",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link ParticleSystemComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5841,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ParticleSystemComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.particlesystem"
					}
				},
				{
					"id": 548,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A read-only property to get the path of the graph node relative to\nthe root of the hierarchy."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13682,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.path"
					}
				},
				{
					"id": 535,
					"name": "render",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link RenderComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5845,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "RenderComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.render"
					}
				},
				{
					"id": 543,
					"name": "right",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "The normalized local space X-axis vector of the graph node in world space."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13659,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec3"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.right"
					}
				},
				{
					"id": 536,
					"name": "rigidbody",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link RigidBodyComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5849,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "RigidBodyComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.rigidbody"
					}
				},
				{
					"id": 549,
					"name": "root",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "A read-only property to get highest graph node from current node."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13686,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "GraphNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.root"
					}
				},
				{
					"id": 537,
					"name": "screen",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link ScreenComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5853,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ScreenComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.screen"
					}
				},
				{
					"id": 538,
					"name": "script",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link ScriptComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5857,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ScriptComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.script"
					}
				},
				{
					"id": 539,
					"name": "scrollbar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link ScrollbarComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5861,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ScrollbarComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.scrollbar"
					}
				},
				{
					"id": 540,
					"name": "scrollview",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link ScrollViewComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5865,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ScrollViewComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.scrollview"
					}
				},
				{
					"id": 541,
					"name": "sound",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link SoundComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5869,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "SoundComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.sound"
					}
				},
				{
					"id": 542,
					"name": "sprite",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Gets the {@link SpriteComponent} attached to this entity. [read only]"
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5873,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "SpriteComponent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.sprite"
					}
				},
				{
					"id": 677,
					"name": "tags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Interface for tagging graph nodes. Tag based searches can be performed using the {@link GraphNode#findByTag} function."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14152,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Tags"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.tags"
					}
				},
				{
					"id": 544,
					"name": "up",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "The normalized local space Y-axis vector of the graph node in world space."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13663,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec3"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.up"
					}
				},
				{
					"id": 496,
					"name": "changeFlag",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 119,
							"character": 8
						}
					],
					"getSignature": [
						{
							"id": 497,
							"name": "changeFlag",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.changeFlag"
							}
						}
					],
					"setSignature": [
						{
							"id": 498,
							"name": "changeFlag",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 499,
									"name": "flag",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.changeFlag"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Entity.changeFlag"
					}
				},
				{
					"id": 488,
					"name": "ignoreMeshes",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 89,
							"character": 8
						}
					],
					"getSignature": [
						{
							"id": 489,
							"name": "ignoreMeshes",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.ignoreMeshes"
							}
						}
					],
					"setSignature": [
						{
							"id": 490,
							"name": "ignoreMeshes",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 491,
									"name": "ignoreNames",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.ignoreMeshes"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Entity.ignoreMeshes"
					}
				},
				{
					"id": 486,
					"name": "meshesToRaycast",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 74,
							"character": 8
						}
					],
					"getSignature": [
						{
							"id": 487,
							"name": "meshesToRaycast",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "MeshInstance"
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.meshesToRaycast"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Entity.meshesToRaycast"
					}
				},
				{
					"id": 492,
					"name": "resultNodeDepth",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 109,
							"character": 8
						}
					],
					"getSignature": [
						{
							"id": 493,
							"name": "resultNodeDepth",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.resultNodeDepth"
							}
						}
					],
					"setSignature": [
						{
							"id": 494,
							"name": "resultNodeDepth",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 495,
									"name": "depth",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.resultNodeDepth"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Entity.resultNodeDepth"
					}
				},
				{
					"id": 482,
					"name": "useInput",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 59,
							"character": 8
						}
					],
					"getSignature": [
						{
							"id": 483,
							"name": "useInput",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.useInput"
							}
						}
					],
					"setSignature": [
						{
							"id": 484,
							"name": "useInput",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 485,
									"name": "use",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.useInput"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Entity.useInput"
					}
				},
				{
					"id": 638,
					"name": "addChild",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14031,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 639,
							"name": "addChild",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Add a new child to the child list and update the parent value of the child node.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar e = new pc.Entity(app);\nthis.entity.addChild(e);"
									}
								]
							},
							"parameters": [
								{
									"id": 640,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The new child to add.\n"
									},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.addChild"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.addChild"
					}
				},
				{
					"id": 503,
					"name": "addComponent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5739,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 504,
							"name": "addComponent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Create a new component and add it to the entity.\nUse this to add functionality to the entity like rendering a model, playing sounds and so on.",
								"returns": "The new Component that was attached to the entity or null if there\nwas an error.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar entity = new pc.Entity();\n\n// Add a light component with default properties\nentity.addComponent(\"light\");\n\n// Add a camera component with some specified properties\nentity.addComponent(\"camera\", {\n    fov: 45,\n    clearColor: new pc.Color(1, 0, 0)\n});"
									}
								]
							},
							"parameters": [
								{
									"id": 505,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the component to add. Valid strings are:\n\n- \"anim\" - see {@link AnimComponent}\n- \"animation\" - see {@link AnimationComponent}\n- \"audiolistener\" - see {@link AudioListenerComponent}\n- \"button\" - see {@link ButtonComponent}\n- \"camera\" - see {@link CameraComponent}\n- \"collision\" - see {@link CollisionComponent}\n- \"element\" - see {@link ElementComponent}\n- \"layoutchild\" - see {@link LayoutChildComponent}\n- \"layoutgroup\" - see {@link LayoutGroupComponent}\n- \"light\" - see {@link LightComponent}\n- \"model\" - see {@link ModelComponent}\n- \"particlesystem\" - see {@link ParticleSystemComponent}\n- \"render\" - see {@link RenderComponent}\n- \"rigidbody\" - see {@link RigidBodyComponent}\n- \"screen\" - see {@link ScreenComponent}\n- \"script\" - see {@link ScriptComponent}\n- \"scrollbar\" - see {@link ScrollbarComponent}\n- \"scrollview\" - see {@link ScrollViewComponent}\n- \"sound\" - see {@link SoundComponent}\n- \"sprite\" - see {@link SpriteComponent}"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 506,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Component"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.addComponent"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.addComponent"
					}
				},
				{
					"id": 521,
					"name": "clone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5793,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 522,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Create a deep copy of the Entity. Duplicate the full Entity hierarchy, with all Components and all descendants.\nNote, this Entity is not in the hierarchy and must be added manually.",
								"returns": "A new Entity which is a deep copy of the original.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar e = this.entity.clone();\n\n// Add clone as a sibling to the original\nthis.entity.parent.addChild(e);"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Entity"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.clone"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.clone"
					}
				},
				{
					"id": 519,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5782,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 520,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Remove all components from the Entity and detach it from the Entity hierarchy. Then recursively destroy all ancestor Entities.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar firstChild = this.entity.children[0];\nfirstChild.destroy(); // delete child, all components and remove from hierarchy\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.destroy"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.destroy"
					}
				},
				{
					"id": 552,
					"name": "find",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13715,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 553,
							"name": "find",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Search the graph node and all of its descendants for the nodes that satisfy some search criteria.",
								"returns": "The array of graph nodes that match the search criteria.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Finds all nodes that have a model component and have `door` in their lower-cased name\nvar doors = house.find(function (node) {\n    return node.model && node.name.toLowerCase().indexOf('door') !== -1;\n});"
									},
									{
										"tag": "example",
										"text": "\n// Finds all nodes that have the name property set to 'Test'\nvar entities = parent.find('name', 'Test');"
									}
								]
							},
							"parameters": [
								{
									"id": 554,
									"name": "attr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "This can either be a function or a string. If it's a function, it is executed\nfor each descendant node to test if node satisfies the search logic. Returning true from the function will\ninclude the node into the results. If it's a string then it represents the name of a field or a method of the\nnode. If this is the name of a field then the value passed as the second argument will be checked for equality.\nIf this is the name of a function then the return value of the function will be checked for equality against\nthe valued passed as the second argument to this function."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "FindNode"
											}
										]
									}
								},
								{
									"id": 555,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "GraphNode"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.find"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.find"
					}
				},
				{
					"id": 516,
					"name": "findByGuid",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5775,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 517,
							"name": "findByGuid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Find a descendant of this Entity with the GUID.",
								"returns": "The Entity with the GUID or null.\n"
							},
							"parameters": [
								{
									"id": 518,
									"name": "guid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The GUID to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Entity"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.findByGuid"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.findByGuid"
					}
				},
				{
					"id": 563,
					"name": "findByName",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13764,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 564,
							"name": "findByName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the first node found in the graph with the name. The search\nis depth first.",
								"returns": "The first node to be found matching the supplied name.\n"
							},
							"parameters": [
								{
									"id": 565,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the graph."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "GraphNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.findByName"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.findByName"
					}
				},
				{
					"id": 566,
					"name": "findByPath",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13773,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 567,
							"name": "findByPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the first node found in the graph by its full path in the graph.\nThe full path has this form 'parent/child/sub-child'. The search is depth first.",
								"returns": "The first node to be found matching the supplied path.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar path = this.entity.findByPath('child/another_child');"
									}
								]
							},
							"parameters": [
								{
									"id": 568,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The full path of the {@link GraphNode} as either a string or array of {@link GraphNode} names."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "GraphNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.findByPath"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.findByPath"
					}
				},
				{
					"id": 560,
					"name": "findByTag",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13757,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 561,
							"name": "findByTag",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Return all graph nodes that satisfy the search query.\nQuery can be simply a string, or comma separated strings,\nto have inclusive results of assets that match at least one query.\nA query that consists of an array of tags can be used to match graph nodes that have each tag of array.",
								"returns": "A list of all graph nodes that match the query.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Return all graph nodes that tagged by `animal`\nvar animals = node.findByTag(\"animal\");"
									},
									{
										"tag": "example",
										"text": "\n// Return all graph nodes that tagged by `bird` OR `mammal`\nvar birdsAndMammals = node.findByTag(\"bird\", \"mammal\");"
									},
									{
										"tag": "example",
										"text": "\n// Return all assets that tagged by `carnivore` AND `mammal`\nvar meatEatingMammals = node.findByTag([\"carnivore\", \"mammal\"]);"
									},
									{
										"tag": "example",
										"text": "\n// Return all assets that tagged by (`carnivore` AND `mammal`) OR (`carnivore` AND `reptile`)\nvar meatEatingMammalsAndReptiles = node.findByTag([\"carnivore\", \"mammal\"], [\"carnivore\", \"reptile\"]);"
									}
								]
							},
							"parameters": [
								{
									"id": 562,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Name of a tag or array of tags."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "GraphNode"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.findByTag"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.findByTag"
					}
				},
				{
					"id": 510,
					"name": "findComponent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5759,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 511,
							"name": "findComponent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Search the entity and all of its descendants for the first component of specified type.",
								"returns": "A component of specified type, if the entity or any of its descendants has\none. Returns undefined otherwise.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Get the first found light component in the hierarchy tree that starts with this entity\nvar light = entity.findComponent(\"light\");"
									}
								]
							},
							"parameters": [
								{
									"id": 512,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the component type to retrieve."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Component"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.findComponent"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.findComponent"
					}
				},
				{
					"id": 513,
					"name": "findComponents",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5769,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 514,
							"name": "findComponents",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Search the entity and all of its descendants for all components of specified type.",
								"returns": "All components of specified type in the entity or any of its descendants.\nReturns empty array if none found.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Get all light components in the hierarchy tree that starts with this entity\nvar lights = entity.findComponents(\"light\");"
									}
								]
							},
							"parameters": [
								{
									"id": 515,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the component type to retrieve."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Component"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.findComponents"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.findComponents"
					}
				},
				{
					"id": 556,
					"name": "findOne",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13736,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 557,
							"name": "findOne",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Search the graph node and all of its descendants for the first node that satisfies some search criteria.",
								"returns": "A graph node that match the search criteria.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Find the first node that is called `head` and has a model component\nvar head = player.findOne(function (node) {\n    return node.model && node.name === 'head';\n});"
									},
									{
										"tag": "example",
										"text": "\n// Finds the first node that has the name property set to 'Test'\nvar node = parent.findOne('name', 'Test');"
									}
								]
							},
							"parameters": [
								{
									"id": 558,
									"name": "attr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "This can either be a function or a string. If it's a function, it is executed\nfor each descendant node to test if node satisfies the search logic. Returning true from the function will\nresult in that node being returned from findOne. If it's a string then it represents the name of a field or a method of the\nnode. If this is the name of a field then the value passed as the second argument will be checked for equality.\nIf this is the name of a function then the return value of the function will be checked for equality against\nthe valued passed as the second argument to this function."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "FindNode"
											}
										]
									}
								},
								{
									"id": 559,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "GraphNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.findOne"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.findOne"
					}
				},
				{
					"id": 688,
					"name": "fire",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 851,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 689,
							"name": "fire",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Fire an event, all additional arguments are passed on to the event listener.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nobj.fire('test', 'This is the message');"
									}
								]
							},
							"parameters": [
								{
									"id": 690,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Name of event to fire."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 691,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 692,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 693,
									"name": "arg3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 694,
									"name": "arg4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 695,
									"name": "arg5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 696,
									"name": "arg6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 697,
									"name": "arg7",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 698,
									"name": "arg8",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.fire"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.fire"
					}
				},
				{
					"id": 569,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13784,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 570,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Executes a provided function once on this graph node and all of its descendants.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Log the path and name of each node in descendant tree starting with \"parent\"\nparent.forEach(function (node) {\n    console.log(node.path + \"/\" + node.name);\n});"
									}
								]
							},
							"parameters": [
								{
									"id": 571,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The function to execute on the graph node and each descendant."
									},
									"type": {
										"type": "reference",
										"name": "ForEach"
									}
								},
								{
									"id": 572,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.forEach"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.forEach"
					}
				},
				{
					"id": 579,
					"name": "getEulerAngles",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13816,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 580,
							"name": "getEulerAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the world space rotation for the specified GraphNode in Euler angle\nform. The rotation is returned as euler angles in a {@link Vec3}. The value returned by this function\nshould be considered read-only. In order to set the world-space rotation of the graph\nnode, use {@link GraphNode#setEulerAngles}.",
								"returns": "The world space rotation of the graph node in Euler angle form.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar angles = this.entity.getEulerAngles();\nangles.y = 180; // rotate the entity around Y by 180 degrees\nthis.entity.setEulerAngles(angles);"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Vec3"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getEulerAngles"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getEulerAngles"
					}
				},
				{
					"id": 581,
					"name": "getLocalEulerAngles",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13828,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 582,
							"name": "getLocalEulerAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the rotation in local space for the specified GraphNode. The rotation\nis returned as euler angles in a {@link Vec3}. The\nreturned vector should be considered read-only. To update the local rotation, use\n{@link GraphNode#setLocalEulerAngles}.",
								"returns": "The local space rotation of the graph node as euler angles in XYZ order.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar angles = this.entity.getLocalEulerAngles();\nangles.y = 180;\nthis.entity.setLocalEulerAngles(angles);"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Vec3"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getLocalEulerAngles"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getLocalEulerAngles"
					}
				},
				{
					"id": 583,
					"name": "getLocalPosition",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13839,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 584,
							"name": "getLocalPosition",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the position in local space for the specified GraphNode. The position\nis returned as a {@link Vec3}. The returned vector should be considered read-only.\nTo update the local position, use {@link GraphNode#setLocalPosition}.",
								"returns": "The local space position of the graph node.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar position = this.entity.getLocalPosition();\nposition.x += 1; // move the entity 1 unit along x.\nthis.entity.setLocalPosition(position);"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Vec3"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getLocalPosition"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getLocalPosition"
					}
				},
				{
					"id": 585,
					"name": "getLocalRotation",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13848,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 586,
							"name": "getLocalRotation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the rotation in local space for the specified GraphNode. The rotation\nis returned as a {@link Quat}. The returned quaternion should be considered read-only.\nTo update the local rotation, use {@link GraphNode#setLocalRotation}.",
								"returns": "The local space rotation of the graph node as a quaternion.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar rotation = this.entity.getLocalRotation();"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Quat"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getLocalRotation"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getLocalRotation"
					}
				},
				{
					"id": 587,
					"name": "getLocalScale",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13859,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 588,
							"name": "getLocalScale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the scale in local space for the specified GraphNode. The scale\nis returned as a {@link Vec3}. The returned vector should be considered read-only.\nTo update the local scale, use {@link GraphNode#setLocalScale}.",
								"returns": "The local space scale of the graph node.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar scale = this.entity.getLocalScale();\nscale.x = 100;\nthis.entity.setLocalScale(scale);"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Vec3"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getLocalScale"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getLocalScale"
					}
				},
				{
					"id": 589,
					"name": "getLocalTransform",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13867,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 590,
							"name": "getLocalTransform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the local transform matrix for this graph node. This matrix\nis the transform relative to the node's parent's world transformation matrix.",
								"returns": "The node's local transformation matrix.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar transform = this.entity.getLocalTransform();"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Mat4"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getLocalTransform"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getLocalTransform"
					}
				},
				{
					"id": 591,
					"name": "getPosition",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13878,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 592,
							"name": "getPosition",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the world space position for the specified GraphNode. The position\nis returned as a {@link Vec3}. The value returned by this function should be considered read-only.\nIn order to set the world-space position of the graph node, use {@link GraphNode#setPosition}.",
								"returns": "The world space position of the graph node.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar position = this.entity.getPosition();\nposition.x = 10;\nthis.entity.setPosition(position);"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Vec3"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getPosition"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getPosition"
					}
				},
				{
					"id": 593,
					"name": "getRotation",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13887,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 594,
							"name": "getRotation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the world space rotation for the specified GraphNode. The rotation\nis returned as a {@link Quat}. The value returned by this function should be considered read-only. In order\nto set the world-space rotation of the graph node, use {@link GraphNode#setRotation}.",
								"returns": "The world space rotation of the graph node as a quaternion.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar rotation = this.entity.getRotation();"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Quat"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getRotation"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getRotation"
					}
				},
				{
					"id": 595,
					"name": "getWorldTransform",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13894,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 596,
							"name": "getWorldTransform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Get the world transformation matrix for this graph node.",
								"returns": "The node's world transformation matrix.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar transform = this.entity.getWorldTransform();"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "Mat4"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.getWorldTransform"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.getWorldTransform"
					}
				},
				{
					"id": 704,
					"name": "hasEvent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 875,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 705,
							"name": "hasEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Test if there are any handlers bound to an event name.",
								"returns": "True if the object has handlers bound to the specified event name.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nobj.on('test', function () { }); // bind an event to 'test'\nobj.hasEvent('test'); // returns true\nobj.hasEvent('hello'); // returns false"
									}
								]
							},
							"parameters": [
								{
									"id": 706,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the event to test."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.hasEvent"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.hasEvent"
					}
				},
				{
					"id": 641,
					"name": "insertChild",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14040,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 642,
							"name": "insertChild",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Insert a new child to the child list at the specified index and update the parent value of the child node.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar e = new pc.Entity(app);\nthis.entity.insertChild(e, 1);"
									}
								]
							},
							"parameters": [
								{
									"id": 643,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The new child to insert."
									},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								},
								{
									"id": 644,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The index in the child list of the parent where the new node will be inserted.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.insertChild"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.insertChild"
					}
				},
				{
					"id": 576,
					"name": "isAncestorOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13804,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 577,
							"name": "isAncestorOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Check if node is ancestor for another node.",
								"returns": "If node is ancestor for another node.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nif (body.isAncestorOf(foot)) {\n    // foot is within body's hierarchy\n}"
									}
								]
							},
							"parameters": [
								{
									"id": 578,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Potential descendant of node."
									},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.isAncestorOf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.isAncestorOf"
					}
				},
				{
					"id": 573,
					"name": "isDescendantOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13794,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 574,
							"name": "isDescendantOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Check if node is descendant of another node.",
								"returns": "If node is descendant of another node.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nif (roof.isDescendantOf(house)) {\n    // roof is descendant of house entity\n}"
									}
								]
							},
							"parameters": [
								{
									"id": 575,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Potential ancestor of node."
									},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.isDescendantOf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.isDescendantOf"
					}
				},
				{
					"id": 648,
					"name": "lookAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14076,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 649,
							"name": "lookAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Reorients the graph node so that the negative z-axis points towards the target.\nThis function has two valid signatures. Either pass 3D vectors for the look at coordinate and up\nvector, or pass numbers to represent the vectors.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Look at another entity, using the (default) positive y-axis for up\nvar position = otherEntity.getPosition();\nthis.entity.lookAt(position);"
									},
									{
										"tag": "example",
										"text": "\n// Look at another entity, using the negative world y-axis for up\nvar position = otherEntity.getPosition();\nthis.entity.lookAt(position, pc.Vec3.DOWN);"
									},
									{
										"tag": "example",
										"text": "\n// Look at the world space origin, using the (default) positive y-axis for up\nthis.entity.lookAt(0, 0, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Look at world-space coordinate [10, 10, 10], using the negative world y-axis for up\nthis.entity.lookAt(10, 10, 10, 0, -1, 0);"
									}
								]
							},
							"parameters": [
								{
									"id": 650,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "If passing a 3D vector, this is the world-space coordinate to look at.\nOtherwise, it is the x-component of the world-space coordinate to look at."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 651,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 652,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 653,
									"name": "ux",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 654,
									"name": "uy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 655,
									"name": "uz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.lookAt"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.lookAt"
					}
				},
				{
					"id": 683,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 835,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 684,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Detach an event handler from an event. If callback is not provided then all callbacks are unbound from the event,\nif scope is not provided then all events with the callback will be unbound.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar handler = function () {\n};\nobj.on('test', handler);\n\nobj.off(); // Removes all events\nobj.off('test'); // Removes all events called 'test'\nobj.off('test', handler); // Removes all handler functions, called 'test'\nobj.off('test', handler, this); // Removes all hander functions, called 'test' with scope this"
									}
								]
							},
							"parameters": [
								{
									"id": 685,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 686,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 687,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.off"
					}
				},
				{
					"id": 678,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 817,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 679,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Attach an event handler to an event.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nobj.on('test', function (a, b) {\n    console.log(a + b);\n});\nobj.fire('test', 1, 2); // prints 3 to the console"
									}
								]
							},
							"parameters": [
								{
									"id": 680,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Name of the event to bind the callback to."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 681,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Function that is called when event is fired. Note the callback is limited to 8 arguments."
									},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 682,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.on"
					}
				},
				{
					"id": 699,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 865,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 700,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Attach an event handler to an event. This handler will be removed after being fired once.",
								"returns": "Self for chaining.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nobj.once('test', function (a, b) {\n    console.log(a + b);\n});\nobj.fire('test', 1, 2); // prints 3 to the console\nobj.fire('test', 1, 2); // not going to get handled"
									}
								]
							},
							"parameters": [
								{
									"id": 701,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Name of the event to bind the callback to."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 702,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Function that is called when event is fired. Note the callback is limited to 8 arguments."
									},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 703,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.once"
					}
				},
				{
					"id": 645,
					"name": "removeChild",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14048,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 646,
							"name": "removeChild",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Remove the node from the child list and update the parent value of the child.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar child = this.entity.children[0];\nthis.entity.removeChild(child);"
									}
								]
							},
							"parameters": [
								{
									"id": 647,
									"name": "child",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The node to remove.\n"
									},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.removeChild"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.removeChild"
					}
				},
				{
					"id": 507,
					"name": "removeComponent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 5749,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 508,
							"name": "removeComponent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Remove a component from the Entity.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar entity = new pc.Entity();\nentity.addComponent(\"light\"); // add new light component\n\nentity.removeComponent(\"light\"); // remove light component"
									}
								]
							},
							"parameters": [
								{
									"id": 509,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the Component type.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.removeComponent"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.removeComponent"
					}
				},
				{
					"id": 597,
					"name": "reparent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13900,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 598,
							"name": "reparent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Remove graph node from current parent and add as child to new parent."
							},
							"parameters": [
								{
									"id": 599,
									"name": "parent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "New parent to attach graph node to."
									},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								},
								{
									"id": 600,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.reparent"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.reparent"
					}
				},
				{
					"id": 500,
					"name": "reparentAndKeepTransform",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/extendClasses/entity.ts",
							"line": 132,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 501,
							"name": "reparentAndKeepTransform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "description:",
										"text": "改变父节点并保持物体的transform"
									}
								]
							},
							"parameters": [
								{
									"id": 502,
									"name": "parent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "父节点\n"
									},
									"type": {
										"type": "reference",
										"name": "Entity"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.Entity.reparentAndKeepTransform"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.Entity.reparentAndKeepTransform"
					}
				},
				{
					"id": 666,
					"name": "rotate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14127,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 667,
							"name": "rotate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Rotates the graph node in world-space by the specified Euler angles.\nEulers are specified in degrees in XYZ order. This function has two valid signatures:\nyou can either pass a 3D vector or 3 numbers to specify the world-space rotation.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Rotate via 3 numbers\nthis.entity.rotate(0, 90, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Rotate via vector\nvar r = new pc.Vec3(0, 90, 0);\nthis.entity.rotate(r);"
									}
								]
							},
							"parameters": [
								{
									"id": 668,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding world-space rotation or\nrotation around world-space x-axis in degrees."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 669,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 670,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.rotate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.rotate"
					}
				},
				{
					"id": 671,
					"name": "rotateLocal",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14144,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 672,
							"name": "rotateLocal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Rotates the graph node in local-space by the specified Euler angles.\nEulers are specified in degrees in XYZ order. This function has two valid signatures:\nyou can either pass a 3D vector or 3 numbers to specify the local-space rotation.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Rotate via 3 numbers\nthis.entity.rotateLocal(0, 90, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Rotate via vector\nvar r = new pc.Vec3(0, 90, 0);\nthis.entity.rotateLocal(r);"
									}
								]
							},
							"parameters": [
								{
									"id": 673,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding local-space rotation or\nrotation around local-space x-axis in degrees."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 674,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 675,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.rotateLocal"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.rotateLocal"
					}
				},
				{
					"id": 633,
					"name": "setEulerAngles",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14023,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 634,
							"name": "setEulerAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sets the world-space rotation of the specified graph node using euler angles.\nEulers are interpreted in XYZ order. Eulers must be specified in degrees. This function\nhas two valid signatures: you can either pass a 3D vector or 3 numbers to specify the\nworld-space euler rotation.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Set rotation of 90 degrees around world-space y-axis via 3 numbers\nthis.entity.setEulerAngles(0, 90, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Set rotation of 90 degrees around world-space y-axis via a vector\nvar angles = new pc.Vec3(0, 90, 0);\nthis.entity.setEulerAngles(angles);"
									}
								]
							},
							"parameters": [
								{
									"id": 635,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding eulers or rotation around world-space\nx-axis in degrees."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 636,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 637,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.setEulerAngles"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.setEulerAngles"
					}
				},
				{
					"id": 601,
					"name": "setLocalEulerAngles",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13918,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 602,
							"name": "setLocalEulerAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sets the local-space rotation of the specified graph node using euler angles.\nEulers are interpreted in XYZ order. Eulers must be specified in degrees. This function\nhas two valid signatures: you can either pass a 3D vector or 3 numbers to specify the\nlocal-space euler rotation.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Set rotation of 90 degrees around y-axis via 3 numbers\nthis.entity.setLocalEulerAngles(0, 90, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Set rotation of 90 degrees around y-axis via a vector\nvar angles = new pc.Vec3(0, 90, 0);\nthis.entity.setLocalEulerAngles(angles);"
									}
								]
							},
							"parameters": [
								{
									"id": 603,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding eulers or rotation around local-space\nx-axis in degrees."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 604,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 605,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.setLocalEulerAngles"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.setLocalEulerAngles"
					}
				},
				{
					"id": 606,
					"name": "setLocalPosition",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13935,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 607,
							"name": "setLocalPosition",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sets the local-space position of the specified graph node. This function\nhas two valid signatures: you can either pass a 3D vector or 3 numbers to specify the\nlocal-space position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Set via 3 numbers\nthis.entity.setLocalPosition(0, 10, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Set via vector\nvar pos = new pc.Vec3(0, 10, 0);\nthis.entity.setLocalPosition(pos);"
									}
								]
							},
							"parameters": [
								{
									"id": 608,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding local-space position or\nx-coordinate of local-space position."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 609,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 610,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.setLocalPosition"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.setLocalPosition"
					}
				},
				{
					"id": 611,
					"name": "setLocalRotation",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13953,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 612,
							"name": "setLocalRotation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sets the local-space rotation of the specified graph node. This function\nhas two valid signatures: you can either pass a quaternion or 3 numbers to specify the\nlocal-space rotation.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Set via 4 numbers\nthis.entity.setLocalRotation(0, 0, 0, 1);"
									},
									{
										"tag": "example",
										"text": "\n// Set via quaternion\nvar q = pc.Quat();\nthis.entity.setLocalRotation(q);"
									}
								]
							},
							"parameters": [
								{
									"id": 613,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Quaternion holding local-space rotation or x-component of\nlocal-space quaternion rotation."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Quat"
											}
										]
									}
								},
								{
									"id": 614,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 615,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 616,
									"name": "w",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.setLocalRotation"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.setLocalRotation"
					}
				},
				{
					"id": 617,
					"name": "setLocalScale",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13970,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 618,
							"name": "setLocalScale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sets the local-space scale factor of the specified graph node. This function\nhas two valid signatures: you can either pass a 3D vector or 3 numbers to specify the\nlocal-space scale.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Set via 3 numbers\nthis.entity.setLocalScale(10, 10, 10);"
									},
									{
										"tag": "example",
										"text": "\n// Set via vector\nvar scale = new pc.Vec3(10, 10, 10);\nthis.entity.setLocalScale(scale);"
									}
								]
							},
							"parameters": [
								{
									"id": 619,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding local-space scale or x-coordinate\nof local-space scale."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 620,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 621,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.setLocalScale"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.setLocalScale"
					}
				},
				{
					"id": 622,
					"name": "setPosition",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 13987,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 623,
							"name": "setPosition",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sets the world-space position of the specified graph node. This function\nhas two valid signatures: you can either pass a 3D vector or 3 numbers to specify the\nworld-space position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Set via 3 numbers\nthis.entity.setPosition(0, 10, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Set via vector\nvar position = new pc.Vec3(0, 10, 0);\nthis.entity.setPosition(position);"
									}
								]
							},
							"parameters": [
								{
									"id": 624,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding world-space position or\nx-coordinate of world-space position."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 625,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 626,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.setPosition"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.setPosition"
					}
				},
				{
					"id": 627,
					"name": "setRotation",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14005,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 628,
							"name": "setRotation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sets the world-space rotation of the specified graph node. This function\nhas two valid signatures: you can either pass a quaternion or 3 numbers to specify the\nworld-space rotation.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Set via 4 numbers\nthis.entity.setRotation(0, 0, 0, 1);"
									},
									{
										"tag": "example",
										"text": "\n// Set via quaternion\nvar q = pc.Quat();\nthis.entity.setRotation(q);"
									}
								]
							},
							"parameters": [
								{
									"id": 629,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Quaternion holding world-space rotation or x-component of\nworld-space quaternion rotation."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Quat"
											}
										]
									}
								},
								{
									"id": 630,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 631,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 632,
									"name": "w",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.setRotation"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.setRotation"
					}
				},
				{
					"id": 656,
					"name": "translate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14093,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 657,
							"name": "translate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Translates the graph node in world-space by the specified translation vector.\nThis function has two valid signatures: you can either pass a 3D vector or 3 numbers to\nspecify the world-space translation.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Translate via 3 numbers\nthis.entity.translate(10, 0, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Translate via vector\nvar t = new pc.Vec3(10, 0, 0);\nthis.entity.translate(t);"
									}
								]
							},
							"parameters": [
								{
									"id": 658,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding world-space translation or\nx-coordinate of world-space translation."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 659,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 660,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.translate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.translate"
					}
				},
				{
					"id": 661,
					"name": "translateLocal",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 14110,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 662,
							"name": "translateLocal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Translates the graph node in local-space by the specified translation vector.\nThis function has two valid signatures: you can either pass a 3D vector or 3 numbers to\nspecify the local-space translation.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// Translate via 3 numbers\nthis.entity.translateLocal(10, 0, 0);"
									},
									{
										"tag": "example",
										"text": "\n// Translate via vector\nvar t = new pc.Vec3(10, 0, 0);\nthis.entity.translateLocal(t);"
									}
								]
							},
							"parameters": [
								{
									"id": 663,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "3-dimensional vector holding local-space translation or\nx-coordinate of local-space translation."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Vec3"
											}
										]
									}
								},
								{
									"id": 664,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 665,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "pc.Entity.translateLocal"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.Entity.translateLocal"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						473
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						481,
						479,
						478,
						480,
						477,
						523,
						524,
						525,
						526,
						527,
						550,
						528,
						529,
						546,
						545,
						551,
						530,
						531,
						532,
						533,
						676,
						547,
						534,
						548,
						535,
						543,
						536,
						549,
						537,
						538,
						539,
						540,
						541,
						542,
						677,
						544
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						496,
						488,
						486,
						492,
						482
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						638,
						503,
						521,
						519,
						552,
						516,
						563,
						566,
						560,
						510,
						513,
						556,
						688,
						569,
						579,
						581,
						583,
						585,
						587,
						589,
						591,
						593,
						595,
						704,
						641,
						576,
						573,
						648,
						683,
						678,
						699,
						645,
						507,
						597,
						500,
						666,
						671,
						633,
						601,
						606,
						611,
						617,
						622,
						627,
						656,
						661
					]
				}
			],
			"sources": [
				{
					"fileName": "src/extensions/extendClasses/entity.ts",
					"line": 45,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Entity"
				}
			]
		},
		{
			"id": 191,
			"name": "Filter",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 195,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 49,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 196,
							"name": "new Filter",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 197,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 198,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 199,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 200,
														"name": "paraName",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 191,
								"name": "Filter"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.PostEffect.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.PostEffect.constructor"
					}
				},
				{
					"id": 201,
					"name": "args",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 32,
							"character": 11
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 202,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 203,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 204,
										"name": "paraName",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					}
				},
				{
					"id": 205,
					"name": "binbMap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 33,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Map"
					}
				},
				{
					"id": 248,
					"name": "device",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The graphics device of the application. [read only]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7325,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "GraphicsDevice"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.PostEffect.device"
					}
				},
				{
					"id": 251,
					"name": "needsDepthBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The property that should to be set to `true` (by the custom post effect) if a depth map is necessary (default is false)."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7337,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.PostEffect.needsDepthBuffer"
					}
				},
				{
					"id": 207,
					"name": "passes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 36,
							"character": 12
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IfilterPass"
						}
					},
					"defaultValue": "[]"
				},
				{
					"id": 206,
					"name": "rtCache",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 34,
							"character": 11
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "RenderTarget"
						}
					},
					"defaultValue": "[]"
				},
				{
					"id": 250,
					"name": "shader",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The shader definition for the fullscreen quad. Needs to be set by the custom post effect (default is null). Used when calling {@link drawFullscreenQuad}."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7333,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Shader"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.PostEffect.shader"
					}
				},
				{
					"id": 208,
					"name": "shaders",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 37,
							"character": 12
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "Shader"
						}
					},
					"defaultValue": "[]"
				},
				{
					"id": 249,
					"name": "vertexBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The vertex buffer for the fullscreen quad. Used when calling {@link drawFullscreenQuad}. [read only]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7329,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "VertexBuffer"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "pc.PostEffect.vertexBuffer"
					}
				},
				{
					"id": 238,
					"name": "addBinder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 190,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 239,
							"name": "addBinder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 240,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 241,
									"name": "binder",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IattributesBinder"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 209,
					"name": "addPasses",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 75,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 210,
							"name": "addPasses",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 211,
									"name": "params",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IfilterPass"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 220,
					"name": "cache",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 130,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 221,
							"name": "cache",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 222,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 223,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 224,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 225,
													"name": "scale",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "src/classes/utils/filter.ts",
															"line": 130,
															"character": 46
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														225
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICacheOption"
							}
						}
					]
				},
				{
					"id": 226,
					"name": "createTargetCache",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 138,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 227,
							"name": "createTargetCache",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 228,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 229,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								},
								{
									"id": 230,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 231,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderTarget"
							}
						}
					]
				},
				{
					"id": 232,
					"name": "getTargetCache",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 169,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 233,
							"name": "getTargetCache",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 234,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 235,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderTarget"
							}
						}
					]
				},
				{
					"id": 242,
					"name": "instanceOfBinder",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 196,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 243,
							"name": "instanceOfBinder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 244,
									"name": "object",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "object",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "IattributesBinder"
								}
							}
						}
					]
				},
				{
					"id": 245,
					"name": "instanceOfCache",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 201,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 246,
							"name": "instanceOfCache",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 247,
									"name": "object",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "object",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "ICacheOption"
								}
							}
						}
					]
				},
				{
					"id": 236,
					"name": "refreshTargets",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 174,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 237,
							"name": "refreshTargets",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 215,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 90,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 216,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 217,
									"name": "inputTarget",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RenderTarget"
									}
								},
								{
									"id": 218,
									"name": "outputTarget",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RenderTarget"
									}
								},
								{
									"id": 219,
									"name": "rect",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vec4"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "pc.PostEffect.render"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "pc.PostEffect.render"
					}
				},
				{
					"id": 212,
					"name": "value",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 85,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 213,
							"name": "value",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 214,
									"name": "para",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 192,
					"name": "parseValueToShader",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 39,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 193,
							"name": "parseValueToShader",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 194,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						195
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						201,
						205,
						248,
						251,
						207,
						206,
						250,
						208,
						249
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						238,
						209,
						220,
						226,
						232,
						242,
						245,
						236,
						215,
						212,
						192
					]
				}
			],
			"sources": [
				{
					"fileName": "src/classes/utils/filter.ts",
					"line": 30,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "PostEffect"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1,
					"name": "Filter_Bloom"
				},
				{
					"type": "reference",
					"id": 57,
					"name": "Filter_Empty"
				}
			]
		},
		{
			"id": 1,
			"name": "Filter_Bloom",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 5,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/classes/filters/filter_bloom.ts",
							"line": 16,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 6,
							"name": "new Filter_Bloom",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 7,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Ioption_Filter_Bloom"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Filter_Bloom"
							},
							"overwrites": {
								"type": "reference",
								"id": 196,
								"name": "Filter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 195,
						"name": "Filter.constructor"
					}
				},
				{
					"id": 24,
					"name": "args",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 32,
							"character": 11
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 25,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 26,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 27,
										"name": "paraName",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 201,
						"name": "Filter.args"
					}
				},
				{
					"id": 28,
					"name": "binbMap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 33,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Map"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 205,
						"name": "Filter.binbMap"
					}
				},
				{
					"id": 53,
					"name": "device",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The graphics device of the application. [read only]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7325,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "GraphicsDevice"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 248,
						"name": "Filter.device"
					}
				},
				{
					"id": 56,
					"name": "needsDepthBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The property that should to be set to `true` (by the custom post effect) if a depth map is necessary (default is false)."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7337,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 251,
						"name": "Filter.needsDepthBuffer"
					}
				},
				{
					"id": 29,
					"name": "rtCache",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 34,
							"character": 11
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "RenderTarget"
						}
					},
					"defaultValue": "[]",
					"inheritedFrom": {
						"type": "reference",
						"id": 206,
						"name": "Filter.rtCache"
					}
				},
				{
					"id": 8,
					"name": "sampleCount",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/filters/filter_bloom.ts",
							"line": 12,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "15"
				},
				{
					"id": 10,
					"name": "sampleOffsets",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/filters/filter_bloom.ts",
							"line": 14,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Float32Array"
					},
					"defaultValue": "..."
				},
				{
					"id": 9,
					"name": "sampleWeights",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/filters/filter_bloom.ts",
							"line": 13,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Float32Array"
					},
					"defaultValue": "..."
				},
				{
					"id": 55,
					"name": "shader",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The shader definition for the fullscreen quad. Needs to be set by the custom post effect (default is null). Used when calling {@link drawFullscreenQuad}."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7333,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Shader"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 250,
						"name": "Filter.shader"
					}
				},
				{
					"id": 54,
					"name": "vertexBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The vertex buffer for the fullscreen quad. Used when calling {@link drawFullscreenQuad}. [read only]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7329,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "VertexBuffer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 249,
						"name": "Filter.vertexBuffer"
					}
				},
				{
					"id": 30,
					"name": "addPasses",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 75,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 31,
							"name": "addPasses",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 32,
									"name": "params",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IfilterPass"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 210,
								"name": "Filter.addPasses"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 209,
						"name": "Filter.addPasses"
					}
				},
				{
					"id": 41,
					"name": "cache",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 130,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 42,
							"name": "cache",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 43,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 44,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 45,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 46,
													"name": "scale",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "src/classes/utils/filter.ts",
															"line": 130,
															"character": 46
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														46
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICacheOption"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 221,
								"name": "Filter.cache"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 220,
						"name": "Filter.cache"
					}
				},
				{
					"id": 17,
					"name": "calculateBlurValues",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/filters/filter_bloom.ts",
							"line": 141,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 18,
							"name": "calculateBlurValues",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 19,
									"name": "sampleWeights",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Float32Array"
									}
								},
								{
									"id": 20,
									"name": "sampleOffsets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Float32Array"
									}
								},
								{
									"id": 21,
									"name": "dx",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 22,
									"name": "dy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 23,
									"name": "blurAmount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 13,
					"name": "computeGaussian",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/filters/filter_bloom.ts",
							"line": 136,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 14,
							"name": "computeGaussian",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 15,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 16,
									"name": "theta",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 47,
					"name": "createTargetCache",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 138,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 48,
							"name": "createTargetCache",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 49,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 50,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								},
								{
									"id": 51,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 52,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderTarget"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 227,
								"name": "Filter.createTargetCache"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 226,
						"name": "Filter.createTargetCache"
					}
				},
				{
					"id": 11,
					"name": "initPasses",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/filters/filter_bloom.ts",
							"line": 31,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 12,
							"name": "initPasses",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IfilterPass"
								}
							}
						}
					]
				},
				{
					"id": 36,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 90,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 37,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 38,
									"name": "inputTarget",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RenderTarget"
									}
								},
								{
									"id": 39,
									"name": "outputTarget",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RenderTarget"
									}
								},
								{
									"id": 40,
									"name": "rect",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vec4"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 216,
								"name": "Filter.render"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 215,
						"name": "Filter.render"
					}
				},
				{
					"id": 33,
					"name": "value",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 85,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 34,
							"name": "value",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 35,
									"name": "para",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 213,
								"name": "Filter.value"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 212,
						"name": "Filter.value"
					}
				},
				{
					"id": 2,
					"name": "parseValueToShader",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 39,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "parseValueToShader",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 193,
								"name": "Filter.parseValueToShader"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 192,
						"name": "Filter.parseValueToShader"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						5
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						24,
						28,
						53,
						56,
						29,
						8,
						10,
						9,
						55,
						54
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						30,
						41,
						17,
						13,
						47,
						11,
						36,
						33,
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "src/classes/filters/filter_bloom.ts",
					"line": 10,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 191,
					"name": "Filter"
				}
			]
		},
		{
			"id": 57,
			"name": "Filter_Empty",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 61,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/classes/filters/filter_empty.ts",
							"line": 10,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 62,
							"name": "new Filter_Empty",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 63,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Ioption_Filter_Empty"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 57,
								"name": "Filter_Empty"
							},
							"overwrites": {
								"type": "reference",
								"id": 196,
								"name": "Filter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 195,
						"name": "Filter.constructor"
					}
				},
				{
					"id": 64,
					"name": "args",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 32,
							"character": 11
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 65,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 66,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 67,
										"name": "paraName",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 201,
						"name": "Filter.args"
					}
				},
				{
					"id": 68,
					"name": "binbMap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 33,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Map"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 205,
						"name": "Filter.binbMap"
					}
				},
				{
					"id": 93,
					"name": "device",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The graphics device of the application. [read only]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7325,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "GraphicsDevice"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 248,
						"name": "Filter.device"
					}
				},
				{
					"id": 96,
					"name": "needsDepthBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The property that should to be set to `true` (by the custom post effect) if a depth map is necessary (default is false)."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7337,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 251,
						"name": "Filter.needsDepthBuffer"
					}
				},
				{
					"id": 69,
					"name": "rtCache",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 34,
							"character": 11
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "RenderTarget"
						}
					},
					"defaultValue": "[]",
					"inheritedFrom": {
						"type": "reference",
						"id": 206,
						"name": "Filter.rtCache"
					}
				},
				{
					"id": 95,
					"name": "shader",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The shader definition for the fullscreen quad. Needs to be set by the custom post effect (default is null). Used when calling {@link drawFullscreenQuad}."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7333,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Shader"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 250,
						"name": "Filter.shader"
					}
				},
				{
					"id": 94,
					"name": "vertexBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "The vertex buffer for the fullscreen quad. Used when calling {@link drawFullscreenQuad}. [read only]."
					},
					"sources": [
						{
							"fileName": "node_modules/playcanvas/build/playcanvas.d.ts",
							"line": 7329,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "VertexBuffer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 249,
						"name": "Filter.vertexBuffer"
					}
				},
				{
					"id": 70,
					"name": "addPasses",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 75,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 71,
							"name": "addPasses",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 72,
									"name": "params",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IfilterPass"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 210,
								"name": "Filter.addPasses"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 209,
						"name": "Filter.addPasses"
					}
				},
				{
					"id": 81,
					"name": "cache",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 130,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 82,
							"name": "cache",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 83,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 84,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 85,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 86,
													"name": "scale",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "src/classes/utils/filter.ts",
															"line": 130,
															"character": 46
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														86
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICacheOption"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 221,
								"name": "Filter.cache"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 220,
						"name": "Filter.cache"
					}
				},
				{
					"id": 87,
					"name": "createTargetCache",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 138,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 88,
							"name": "createTargetCache",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 89,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 90,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								},
								{
									"id": 91,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 92,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderTarget"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 227,
								"name": "Filter.createTargetCache"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 226,
						"name": "Filter.createTargetCache"
					}
				},
				{
					"id": 76,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 90,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 77,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 78,
									"name": "inputTarget",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RenderTarget"
									}
								},
								{
									"id": 79,
									"name": "outputTarget",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RenderTarget"
									}
								},
								{
									"id": 80,
									"name": "rect",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vec4"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 216,
								"name": "Filter.render"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 215,
						"name": "Filter.render"
					}
				},
				{
					"id": 73,
					"name": "value",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 85,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "value",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 75,
									"name": "para",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 213,
								"name": "Filter.value"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 212,
						"name": "Filter.value"
					}
				},
				{
					"id": 58,
					"name": "parseValueToShader",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/filter.ts",
							"line": 39,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 59,
							"name": "parseValueToShader",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 60,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 193,
								"name": "Filter.parseValueToShader"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 192,
						"name": "Filter.parseValueToShader"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						61
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						64,
						68,
						93,
						96,
						69,
						95,
						94
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						70,
						81,
						87,
						76,
						73,
						58
					]
				}
			],
			"sources": [
				{
					"fileName": "src/classes/filters/filter_empty.ts",
					"line": 8,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 191,
					"name": "Filter"
				}
			]
		},
		{
			"id": 252,
			"name": "MeshesRaycaster",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 256,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 15,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 257,
							"name": "new MeshesRaycaster",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 252,
								"name": "MeshesRaycaster"
							}
						}
					]
				},
				{
					"id": 259,
					"name": "app",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 9,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Application"
					}
				},
				{
					"id": 263,
					"name": "defaultCamera",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 13,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "CameraComponent"
					}
				},
				{
					"id": 261,
					"name": "hasListener",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 11,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 260,
					"name": "hasMove",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 10,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 262,
					"name": "nodeToRaycast",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 12,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "GraphNode"
							}
						],
						"name": "Set"
					}
				},
				{
					"id": 258,
					"name": "ray",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 8,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Ray"
					}
				},
				{
					"id": 253,
					"name": "instance",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 6,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 252,
						"name": "MeshesRaycaster"
					}
				},
				{
					"id": 288,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 153,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 289,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 264,
					"name": "addNode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 38,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 265,
							"name": "addNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 266,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 292,
					"name": "getNodeOfDepth",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 184,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 293,
							"name": "getNodeOfDepth",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 294,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								},
								{
									"id": 295,
									"name": "depth",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "null"
								}
							],
							"type": {
								"type": "reference",
								"name": "GraphNode"
							}
						}
					]
				},
				{
					"id": 270,
					"name": "onMouseDown",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 57,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 271,
							"name": "onMouseDown",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 272,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 273,
					"name": "onMouseMove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 77,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 274,
							"name": "onMouseMove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 275,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 276,
					"name": "onMouseUp",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 82,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 277,
							"name": "onMouseUp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 278,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 285,
					"name": "onTouchEnd",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 130,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 286,
							"name": "onTouchEnd",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 287,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 282,
					"name": "onTouchMove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 125,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 283,
							"name": "onTouchMove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 284,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 279,
					"name": "onTouchStart",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 104,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 280,
							"name": "onTouchStart",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 281,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 290,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 168,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 291,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 267,
					"name": "removeNode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 48,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 268,
							"name": "removeNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 269,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GraphNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 254,
					"name": "getInstance",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/meshesRaycaster.ts",
							"line": 29,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 255,
							"name": "getInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 252,
								"name": "MeshesRaycaster"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						256
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						259,
						263,
						261,
						260,
						262,
						258,
						253
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						288,
						264,
						292,
						270,
						273,
						276,
						285,
						282,
						279,
						290,
						267,
						254
					]
				}
			],
			"sources": [
				{
					"fileName": "src/classes/utils/meshesRaycaster.ts",
					"line": 3,
					"character": 13
				}
			]
		},
		{
			"id": 715,
			"name": "PathCurve",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"decorators": [
				{
					"name": "extendClass",
					"type": {
						"type": "reference",
						"name": "extendClass"
					},
					"arguments": {}
				}
			],
			"children": [
				{
					"id": 716,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 55,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 717,
							"name": "new PathCurve",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 718,
									"name": "parent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Entity"
									}
								},
								{
									"id": 719,
									"name": "curveMode",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 715,
								"name": "PathCurve"
							}
						}
					]
				},
				{
					"id": 722,
					"name": "curveMode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 33,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 735,
					"name": "distanceBetween",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 49,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec3"
					}
				},
				{
					"id": 733,
					"name": "forward",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 47,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec3"
					}
				},
				{
					"id": 729,
					"name": "lx",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 42,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Curve"
					}
				},
				{
					"id": 730,
					"name": "ly",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 43,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Curve"
					}
				},
				{
					"id": 731,
					"name": "lz",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 44,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Curve"
					}
				},
				{
					"id": 723,
					"name": "nodePercent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 35,
							"character": 11
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				},
				{
					"id": 721,
					"name": "nodes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 32,
							"character": 11
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "Entity"
						}
					}
				},
				{
					"id": 720,
					"name": "parent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 31,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "Entity"
					}
				},
				{
					"id": 724,
					"name": "pathLength",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 36,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 725,
					"name": "percentPreUnit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 37,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 732,
					"name": "position",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 46,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec3"
					}
				},
				{
					"id": 737,
					"name": "precision",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 52,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 726,
					"name": "px",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 39,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Curve"
					}
				},
				{
					"id": 727,
					"name": "py",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 40,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Curve"
					}
				},
				{
					"id": 728,
					"name": "pz",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 41,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Curve"
					}
				},
				{
					"id": 736,
					"name": "rotation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 50,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Quat"
					}
				},
				{
					"id": 738,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 53,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 734,
					"name": "up",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 48,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Vec3"
					}
				},
				{
					"id": 747,
					"name": "cancelDraw",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 183,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 748,
							"name": "cancelDraw",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 741,
					"name": "draw",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 136,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 742,
							"name": "draw",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 743,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 744,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 745,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 746,
														"name": "paraName",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 757,
					"name": "getCurrentPath",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 218,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 758,
							"name": "getCurrentPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 759,
									"name": "percent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 749,
					"name": "getPosition",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 189,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 750,
							"name": "getPosition",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 751,
									"name": "percent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vec3"
							}
						}
					]
				},
				{
					"id": 752,
					"name": "getRotation",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 196,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 753,
							"name": "getRotation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 754,
									"name": "percent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 755,
									"name": "nodeRotation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 756,
									"name": "inverse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Quat"
							}
						}
					]
				},
				{
					"id": 760,
					"name": "getTangent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 228,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 761,
							"name": "getTangent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 762,
									"name": "percent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vec3"
							}
						}
					]
				},
				{
					"id": 739,
					"name": "updateNodes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/extensions/newClasses/pathCurve.ts",
							"line": 95,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 740,
							"name": "updateNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						716
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						722,
						735,
						733,
						729,
						730,
						731,
						723,
						721,
						720,
						724,
						725,
						732,
						737,
						726,
						727,
						728,
						736,
						738,
						734
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						747,
						741,
						757,
						749,
						752,
						760,
						739
					]
				}
			],
			"sources": [
				{
					"fileName": "src/extensions/newClasses/pathCurve.ts",
					"line": 29,
					"character": 13
				}
			]
		},
		{
			"id": 124,
			"name": "ScriptTypeBase",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Base dummy duplicated pc.ScriptType class to be extended when defining.\nAll parameters and useful event-based methods made optional to avoid inadvertedly extending them or having to define them.\nCaveat is: tsconfig.json needs to be set to: \"strictNullChecks\": false",
				"tags": [
					{
						"tag": "export",
						"text": ""
					}
				]
			},
			"children": [
				{
					"id": 125,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 126,
							"name": "new ScriptTypeBase",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 124,
								"name": "ScriptTypeBase"
							}
						}
					]
				},
				{
					"id": 173,
					"name": "app",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The {@link pc.Application} that the instance of this type\nbelongs to."
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 241,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Application"
					}
				},
				{
					"id": 143,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isReadonly": true
					},
					"comment": {
						"tags": [
							{
								"tag": "function",
								"text": ""
							},
							{
								"tag": "name",
								"text": "pc.EventHandler#on"
							},
							{
								"tag": "description",
								"text": "Attach an event handler to an event."
							},
							{
								"tag": "param",
								"text": "Name of the event to bind the callback to.",
								"param": "name"
							},
							{
								"tag": "param",
								"text": "Function that is called when event is fired. Note the callback is limited to 8 arguments.",
								"param": "callback"
							},
							{
								"tag": "param",
								"text": "Object to use as 'this' when the event is fired, defaults to current this.",
								"param": "[scope]"
							},
							{
								"tag": "returns",
								"text": "Self for chaining."
							},
							{
								"tag": "example",
								"text": "\nobj.on('test', function (a, b) {\n    console.log(a + b);\n});\nobj.fire('test', 1, 2); // prints 3 to the console\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 142,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "ScriptAttributes"
					}
				},
				{
					"id": 127,
					"name": "attributesData",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 87,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 128,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 129,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 130,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 107,
									"name": "AttributeParams"
								}
							}
						}
					}
				},
				{
					"id": 175,
					"name": "enabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "True if the instance of this type is in running state. False\nwhen script is not running, because the Entity or any of its parents are disabled or the\nScript Component is disabled or the Script Instance is disabled. When disabled no update\nmethods will be called on each tick. initialize and postInitialize methods will run once\nwhen the script instance is in `enabled` state during app tick."
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 253,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 174,
					"name": "entity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The {@link pc.Entity} that the instance of this type belongs to."
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 245,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Entity"
					}
				},
				{
					"id": 176,
					"name": "addFilters",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 259,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 177,
							"name": "addFilters",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "description:",
										"text": "给这个脚本挂载的相机添加滤镜"
									}
								]
							},
							"parameters": [
								{
									"id": 178,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "滤镜\n"
									},
									"type": {
										"type": "reference",
										"id": 191,
										"name": "Filter"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 179,
					"name": "bindAttribute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 295,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 180,
							"name": "bindAttribute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "description:",
										"text": "绑定此脚本属性到滤镜并根据属性实时更新"
									}
								]
							},
							"parameters": [
								{
									"id": 181,
									"name": "attrName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "要绑定的属性名\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IattributesBinder"
							}
						}
					]
				},
				{
					"id": 154,
					"name": "fire",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 207,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 155,
							"name": "fire",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "Self for chaining.",
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.EventHandler#fire"
									},
									{
										"tag": "description",
										"text": "Fire an event, all additional arguments are passed on to the event listener."
									},
									{
										"tag": "example",
										"text": "\nobj.fire('test', 'This is the message');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 156,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Name of event to fire."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 157,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 158,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 159,
									"name": "arg3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 160,
									"name": "arg4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 161,
									"name": "arg5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 162,
									"name": "arg6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 163,
									"name": "arg7",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 164,
									"name": "arg8",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							}
						}
					]
				},
				{
					"id": 170,
					"name": "hasEvent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 235,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 171,
							"name": "hasEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "True if the object has handlers bound to the specified event name.",
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.EventHandler#hasEvent"
									},
									{
										"tag": "description",
										"text": "Test if there are any handlers bound to an event name."
									},
									{
										"tag": "example",
										"text": "\nobj.on('test', function () { }); // bind an event to 'test'\nobj.hasEvent('test'); // returns true\nobj.hasEvent('hello'); // returns false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 172,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the event to test."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 131,
					"name": "initialize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 97,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 132,
							"name": "initialize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.ScriptType#[initialize]"
									},
									{
										"tag": "description",
										"text": "Called when script is about to run for the first time.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 149,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 189,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 150,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "Self for chaining.",
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.EventHandler#off"
									},
									{
										"tag": "description",
										"text": "Detach an event handler from an event. If callback is not provided then all callbacks are unbound from the event,\nif scope is not provided then all events with the callback will be unbound."
									},
									{
										"tag": "example",
										"text": "\nvar handler = function () {\n};\nobj.on('test', handler);\n\nobj.off(); // Removes all events\nobj.off('test'); // Removes all events called 'test'\nobj.off('test', handler); // Removes all handler functions, called 'test'\nobj.off('test', handler, this); // Removes all hander functions, called 'test' with scope this\n"
									}
								]
							},
							"parameters": [
								{
									"id": 151,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 152,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 153,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							}
						}
					]
				},
				{
					"id": 144,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 169,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 145,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.ScriptType#[initialize]"
									},
									{
										"tag": "description",
										"text": "Called when script is about to run for the first time.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 146,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 147,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 148,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							}
						}
					]
				},
				{
					"id": 165,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 223,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 166,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "Self for chaining.",
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.EventHandler#once"
									},
									{
										"tag": "description",
										"text": "Attach an event handler to an event. This handler will be removed after being fired once."
									},
									{
										"tag": "example",
										"text": "\nobj.once('test', function (a, b) {\n    console.log(a + b);\n});\nobj.fire('test', 1, 2); // prints 3 to the console\nobj.fire('test', 1, 2); // not going to get handled\n"
									}
								]
							},
							"parameters": [
								{
									"id": 167,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Name of the event to bind the callback to."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 168,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Function that is called when event is fired. Note the callback is limited to 8 arguments."
									},
									"type": {
										"type": "reference",
										"name": "HandleEvent"
									}
								},
								{
									"id": 169,
									"name": "scope",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHandler"
							}
						}
					]
				},
				{
					"id": 133,
					"name": "postInitialize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 103,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 134,
							"name": "postInitialize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.ScriptType#[postInitialize]"
									},
									{
										"tag": "description",
										"text": "Called after all initialize methods are executed in the same tick or enabling chain of actions.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 138,
					"name": "postUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 117,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 139,
							"name": "postUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.ScriptType#[postUpdate]"
									},
									{
										"tag": "description",
										"text": "Called for enabled (running state) scripts on each tick, after update."
									}
								]
							},
							"parameters": [
								{
									"id": 140,
									"name": "dt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The delta time in seconds since the last frame.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 141,
					"name": "swap",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 125,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 142,
							"name": "swap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.ScriptType#[swap]"
									},
									{
										"tag": "description",
										"text": "Called when a ScriptType that already exists in the registry\ngets redefined. If the new ScriptType has a `swap` method in its prototype,\nthen it will be executed to perform hot-reload at runtime.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 135,
					"name": "update",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 110,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 136,
							"name": "update",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "function",
										"text": ""
									},
									{
										"tag": "name",
										"text": "pc.ScriptType#[update]"
									},
									{
										"tag": "description",
										"text": "Called for enabled (running state) scripts on each tick."
									}
								]
							},
							"parameters": [
								{
									"id": 137,
									"name": "dt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The delta time in seconds since the last frame.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						125
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						173,
						143,
						127,
						175,
						174
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						176,
						179,
						154,
						170,
						131,
						149,
						144,
						165,
						133,
						138,
						141,
						135
					]
				}
			],
			"sources": [
				{
					"fileName": "src/classes/utils/create-script-decorator.ts",
					"line": 83,
					"character": 13
				}
			]
		},
		{
			"id": 107,
			"name": "AttributeParams",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/classes/utils/create-script-decorator.ts",
					"line": 58,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 108,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 114,
							"name": "array",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 64,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 120,
							"name": "assetType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 70,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 122,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 72,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 121,
							"name": "curves",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 71,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 110,
							"name": "default",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 60,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 112,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 62,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 123,
							"name": "enum",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 73,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "object"
								}
							}
						},
						{
							"id": 117,
							"name": "max",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 67,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 116,
							"name": "min",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 66,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 113,
							"name": "placeholder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 63,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 118,
							"name": "precision",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 68,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 115,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 65,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 119,
							"name": "step",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 69,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 111,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 61,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 109,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/classes/utils/create-script-decorator.ts",
									"line": 59,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "boolean"
									},
									{
										"type": "literal",
										"value": "number"
									},
									{
										"type": "literal",
										"value": "string"
									},
									{
										"type": "literal",
										"value": "json"
									},
									{
										"type": "literal",
										"value": "asset"
									},
									{
										"type": "literal",
										"value": "entity"
									},
									{
										"type": "literal",
										"value": "rgb"
									},
									{
										"type": "literal",
										"value": "rgba"
									},
									{
										"type": "literal",
										"value": "vec2"
									},
									{
										"type": "literal",
										"value": "vec3"
									},
									{
										"type": "literal",
										"value": "vec4"
									},
									{
										"type": "literal",
										"value": "curve"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								114,
								120,
								122,
								121,
								110,
								112,
								123,
								117,
								116,
								113,
								118,
								115,
								119,
								111,
								109
							]
						}
					],
					"sources": [
						{
							"fileName": "src/classes/utils/create-script-decorator.ts",
							"line": 58,
							"character": 30
						}
					]
				}
			}
		},
		{
			"id": 103,
			"name": "attr",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "src/classes/utils/create-script-decorator.ts",
					"line": 46,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 104,
					"name": "attr",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"typeParameter": [
						{
							"id": 105,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 106,
							"name": "params",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 107,
								"name": "AttributeParams"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 97,
			"name": "createScript",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "src/classes/utils/create-script-decorator.ts",
					"line": 13,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 98,
					"name": "createScript",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Class decorator allowing the use of ES6 classes\nto define and create PlayCanvas script types.\nCaveat is: There is a slight iterative runtime overhead to this. (unlike Haxe which can utilize precompiled-macros)\nThe cool thing is that your script (if it uses properties) has an additional property called `attributesData` that can facilitate offboard property reflection/runtime-component\nproperty GUI creation."
					},
					"parameters": [
						{
							"id": 99,
							"name": "name",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 100,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 101,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 102,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				296,
				397,
				445,
				763,
				472,
				191,
				1,
				57,
				252,
				715,
				124
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				107
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				103,
				97
			]
		}
	],
	"sources": [
		{
			"fileName": "src/index.ts",
			"line": 1,
			"character": 0
		}
	]
}